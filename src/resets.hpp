#pragma once
#include "address-map.hpp"
#include "int.hpp"

namespace resets {
struct ResetNum {
    enum : u32 {
        ADC        = 0b0000'0000'0000'0000'0000'0000'0000'0001,
        BusControl = 0b0000'0000'0000'0000'0000'0000'0000'0010,
        DMA        = 0b0000'0000'0000'0000'0000'0000'0000'0100,
        I2C0       = 0b0000'0000'0000'0000'0000'0000'0000'1000,
        I2C1       = 0b0000'0000'0000'0000'0000'0000'0001'0000,
        IOBank0    = 0b0000'0000'0000'0000'0000'0000'0010'0000,
        IOQSPI     = 0b0000'0000'0000'0000'0000'0000'0100'0000,
        JTAG       = 0b0000'0000'0000'0000'0000'0000'1000'0000,
        PadsBank0  = 0b0000'0000'0000'0000'0000'0001'0000'0000,
        PadsQSPI   = 0b0000'0000'0000'0000'0000'0010'0000'0000,
        PIO0       = 0b0000'0000'0000'0000'0000'0100'0000'0000,
        PIO1       = 0b0000'0000'0000'0000'0000'1000'0000'0000,
        PLLSys     = 0b0000'0000'0000'0000'0001'0000'0000'0000,
        PLLUSB     = 0b0000'0000'0000'0000'0010'0000'0000'0000,
        PWM        = 0b0000'0000'0000'0000'0100'0000'0000'0000,
        RTC        = 0b0000'0000'0000'0000'1000'0000'0000'0000,
        SPI0       = 0b0000'0000'0000'0001'0000'0000'0000'0000,
        SPI1       = 0b0000'0000'0000'0010'0000'0000'0000'0000,
        SysConfig  = 0b0000'0000'0000'0100'0000'0000'0000'0000,
        SysInfo    = 0b0000'0000'0000'1000'0000'0000'0000'0000,
        TBMan      = 0b0000'0000'0001'0000'0000'0000'0000'0000,
        Timer      = 0b0000'0000'0010'0000'0000'0000'0000'0000,
        UART0      = 0b0000'0000'0100'0000'0000'0000'0000'0000,
        UART1      = 0b0000'0000'1000'0000'0000'0000'0000'0000,
        USBControl = 0b0000'0001'0000'0000'0000'0000'0000'0000,
    };
};

struct Regs {
    v32  reset;
    v32  watchdog_select;
    cv32 reset_done;
};
} // namespace resets

#define RESETS_REGS       (*(resets::Regs*)(RESETS_BASE + 0x0000))
#define RESETS_REGS_XOR   (*(resets::Regs*)(RESETS_BASE + 0x1000))
#define RESETS_REGS_SET   (*(resets::Regs*)(RESETS_BASE + 0x2000))
#define RESETS_REGS_CLEAR (*(resets::Regs*)(RESETS_BASE + 0x3000))
